{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/runner/smarthr/pages/xlsx2.tsx\";\nimport React, { useState } from \"react\";\nimport DataGrid, { TextEditor } from \"react-data-grid\";\nimport { read, utils, writeFile } from \"xlsx\";\nimport { google } from 'googleapis';\nexport async function getServerSideProps({\n  query\n}) {\n  const auth = await google.auth.getClient({\n    scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly']\n  });\n  const sheets = google.sheets({\n    version: 'v4',\n    auth\n  });\n  const response = await sheets.spreadsheets.values.get({\n    spreadsheetId: process.env.SHEET_ID,\n    range: 'الدليل !G7:J17'\n  });\n  const posts = response.data.values;\n  const postsy = JSON.stringify(response.data.values);\n  const [r1, r2, r3, r4] = response.data.values;\n  const JsonObject = utils.sheet_to_json(response);\n  return {\n    props: {\n      posts,\n      postsy,\n      JsonObject\n    }\n  };\n}\n\nfunction getRowsCols(data, sheetName) {\n  const rows = utils.sheet_to_json(data[sheetName], {\n    header: 1\n  });\n  let columns = [];\n\n  for (let row of rows) {\n    const keys = Object.keys(row);\n\n    if (keys.length > columns.length) {\n      columns = keys.map(key => {\n        return {\n          key,\n          name: utils.encode_col(+key),\n          editor: TextEditor\n        };\n      });\n    }\n  }\n\n  return {\n    rows,\n    columns\n  };\n}\n\nexport default function App() {\n  const {\n    0: rows,\n    1: setRows\n  } = useState([]);\n  const {\n    0: columns,\n    1: setColumns\n  } = useState([]);\n  const {\n    0: workBook,\n    1: setWorkBook\n  } = useState({});\n  const {\n    0: sheets,\n    1: setSheets\n  } = useState([]);\n  const {\n    0: current,\n    1: setCurrent\n  } = useState(\"\");\n  const exportTypes = [\"xlsx\", \"xlsb\", \"csv\", \"html\"];\n\n  function selectSheet(name, reset = true) {\n    if (reset) workBook[current] = utils.json_to_sheet(rows, {\n      header: columns.map(col => col.key),\n      skipHeader: true\n    });\n    const {\n      rows: new_rows,\n      columns: new_columns\n    } = getRowsCols(workBook, name);\n    setRows(new_rows);\n    setColumns(new_columns);\n    setCurrent(name);\n  }\n\n  async function handleFile(ev) {\n    var _ev$target$files, _ev$target$files$;\n\n    const file = await ((_ev$target$files = ev.target.files) === null || _ev$target$files === void 0 ? void 0 : (_ev$target$files$ = _ev$target$files[0]) === null || _ev$target$files$ === void 0 ? void 0 : _ev$target$files$.arrayBuffer());\n    const data = read(file);\n    setWorkBook(data.Sheets);\n    setSheets(data.SheetNames);\n  }\n\n  function saveFile(ext) {\n    const wb = utils.book_new();\n    sheets.forEach(n => {\n      utils.book_append_sheet(wb, workBook[n], n);\n    });\n    writeFile(wb, \"sheet.\" + ext);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-cont\",\n      children: sheets.map(sheet => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => selectSheet(sheet),\n        children: sheet\n      }, sheet, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-cont\",\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: [\"Current Sheet: \", current]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataGrid, {\n      columns: columns,\n      rows: rows,\n      onRowsChange: setRows\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-cont\",\n      children: exportTypes.map(ext => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => saveFile(ext),\n        children: [\"export [.\", ext, \"]\"]\n      }, ext, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}","map":{"version":3,"sources":["/home/runner/smarthr/pages/xlsx2.tsx"],"names":["React","useState","DataGrid","TextEditor","read","utils","writeFile","google","getServerSideProps","query","auth","getClient","scopes","sheets","version","response","spreadsheets","values","get","spreadsheetId","process","env","SHEET_ID","range","posts","data","postsy","JSON","stringify","r1","r2","r3","r4","JsonObject","sheet_to_json","props","getRowsCols","sheetName","rows","header","columns","row","keys","Object","length","map","key","name","encode_col","editor","App","setRows","setColumns","workBook","setWorkBook","setSheets","current","setCurrent","exportTypes","selectSheet","reset","json_to_sheet","col","skipHeader","new_rows","new_columns","handleFile","ev","file","target","files","arrayBuffer","Sheets","SheetNames","saveFile","ext","wb","book_new","forEach","n","book_append_sheet","sheet","e"],"mappings":"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","sourcesContent":["import React, { useState, ChangeEvent } from \"react\";\nimport DataGrid, { TextEditor } from \"react-data-grid\";\nimport { read, utils, WorkSheet, writeFile } from \"xlsx\";\nimport { google } from 'googleapis';\n\nexport async function getServerSideProps({ query }) {\n\n  const auth = await google.auth.getClient({ scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly'] });\n\n  const sheets = google.sheets({ version: 'v4', auth });\n\n  const response = await sheets.spreadsheets.values.get({\n    spreadsheetId: process.env.SHEET_ID,\n    range: 'الدليل !G7:J17',\n  });\n\n  const posts = response.data.values;\n  const postsy = JSON.stringify(response.data.values);\n  const [r1, r2, r3, r4] = response.data.values;\n  const JsonObject = utils.sheet_to_json(response);\n  return {\n    props: {\n      posts,\n      postsy,\n      JsonObject,\n    },\n  };\n}\n\ntype Row = any[]; /*{\n  [index: string]: string | number;\n};*/\n\ntype Column = {\n  key: string;\n  name: string;\n  editor: typeof TextEditor;\n};\n\ntype DataSet = {\n  [index: string]: WorkSheet;\n};\n\nfunction getRowsCols(\n  data: DataSet,\n  sheetName: string\n): {\n  rows: Row[];\n  columns: Column[];\n} {\n  const rows: Row[] = utils.sheet_to_json(data[sheetName], {header:1});\n  let columns: Column[] = [];\n\n  for (let row of rows) {\n    const keys: string[] = Object.keys(row);\n\n    if (keys.length > columns.length) {\n      columns = keys.map((key) => {\n        return { key, name: utils.encode_col(+key), editor: TextEditor };\n      });\n    }\n  }\n\n  return { rows, columns };\n}\n\nexport default function App() {\n  const [rows, setRows] = useState<Row[]>([]);\n  const [columns, setColumns] = useState<Column[]>([]);\n  const [workBook, setWorkBook] = useState<DataSet>({} as DataSet);\n  const [sheets, setSheets] = useState<string[]>([]);\n  const [current, setCurrent] = useState<string>(\"\");\n\n  const exportTypes = [\"xlsx\", \"xlsb\", \"csv\", \"html\"];\n\n  function selectSheet(name: string, reset = true) {\n    if(reset) workBook[current] = utils.json_to_sheet(rows, {\n      header: columns.map((col: Column) => col.key),\n      skipHeader: true\n    });\n\n    const { rows: new_rows, columns: new_columns } = getRowsCols(workBook, name);\n\n    setRows(new_rows);\n    setColumns(new_columns);\n    setCurrent(name);\n  }\n\n  async function handleFile(ev: ChangeEvent<HTMLInputElement>): Promise<void> {\n    const file = await ev.target.files?.[0]?.arrayBuffer();\n    const data = read(file);\n\n    setWorkBook(data.Sheets);\n    setSheets(data.SheetNames);\n  }\n\n  function saveFile(ext: string): void {\n    const wb = utils.book_new();\n\n    sheets.forEach((n) => {\n      utils.book_append_sheet(wb, workBook[n], n);\n    });\n\n    writeFile(wb, \"sheet.\" + ext);\n  }\n\n  return (\n    <>\n      <input type=\"file\" onChange={handleFile} />\n      <div className=\"flex-cont\">\n        {sheets.map((sheet) => (\n          <button key={sheet} onClick={(e) => selectSheet(sheet)}>\n            {sheet}\n          </button>\n        ))}\n      </div>\n      <div className=\"flex-cont\">\n        <b>Current Sheet: {current}</b>\n      </div>\n      <DataGrid columns={columns} rows={rows} onRowsChange={setRows} />\n      <div className=\"flex-cont\">\n        {exportTypes.map((ext) => (\n          <button key={ext} onClick={() => saveFile(ext)}>\n            export [.{ext}]\n          </button>\n        ))}\n      </div>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}