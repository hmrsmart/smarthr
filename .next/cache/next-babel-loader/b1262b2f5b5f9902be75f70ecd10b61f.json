{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/runner/smarthr/pages/xlsx2.tsx\",\n    _s = $RefreshSig$();\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState } from \"react\";\nimport DataGrid, { TextEditor } from \"react-data-grid\";\nimport { read, utils, writeFile } from \"xlsx\";\n\nfunction getRowsCols(data, sheetName) {\n  var rows = utils.sheet_to_json(data[sheetName], {\n    header: 1\n  });\n  var columns = [];\n\n  var _iterator = _createForOfIteratorHelper(rows),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var row = _step.value;\n      var keys = Object.keys(row);\n\n      if (keys.length > columns.length) {\n        columns = keys.map(function (key) {\n          return {\n            key: key,\n            name: utils.encode_col(+key),\n            editor: TextEditor\n          };\n        });\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    rows: rows,\n    columns: columns\n  };\n}\n\nexport default function App() {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState([]),\n      rows = _useState[0],\n      setRows = _useState[1];\n\n  var _useState2 = useState([]),\n      columns = _useState2[0],\n      setColumns = _useState2[1];\n\n  var _useState3 = useState({}),\n      workBook = _useState3[0],\n      setWorkBook = _useState3[1];\n\n  var _useState4 = useState([]),\n      sheets = _useState4[0],\n      setSheets = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      current = _useState5[0],\n      setCurrent = _useState5[1];\n\n  var exportTypes = [\"xlsx\", \"xlsb\", \"csv\", \"html\"];\n\n  function selectSheet(name) {\n    var reset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (reset) workBook[current] = utils.json_to_sheet(rows, {\n      header: columns.map(function (col) {\n        return col.key;\n      }),\n      skipHeader: true\n    });\n\n    var _getRowsCols = getRowsCols(workBook, name),\n        new_rows = _getRowsCols.rows,\n        new_columns = _getRowsCols.columns;\n\n    setRows(new_rows);\n    setColumns(new_columns);\n    setCurrent(name);\n  }\n\n  function handleFile(_x) {\n    return _handleFile.apply(this, arguments);\n  }\n\n  function _handleFile() {\n    _handleFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ev) {\n      var _ev$target$files, _ev$target$files$;\n\n      var file, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return (_ev$target$files = ev.target.files) === null || _ev$target$files === void 0 ? void 0 : (_ev$target$files$ = _ev$target$files[0]) === null || _ev$target$files$ === void 0 ? void 0 : _ev$target$files$.arrayBuffer();\n\n            case 2:\n              file = _context.sent;\n              data = read(file);\n              setWorkBook(data.Sheets);\n              setSheets(data.SheetNames);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _handleFile.apply(this, arguments);\n  }\n\n  function saveFile(ext) {\n    var wb = utils.book_new();\n    sheets.forEach(function (n) {\n      utils.book_append_sheet(wb, workBook[n], n);\n    });\n    writeFile(wb, \"sheet.\" + ext);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-cont\",\n      children: sheets.map(function (sheet) {\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: function onClick(e) {\n            return selectSheet(sheet);\n          },\n          children: sheet\n        }, sheet, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-cont\",\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: [\"Current Sheet: \", current]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataGrid, {\n      columns: columns,\n      rows: rows,\n      onRowsChange: setRows\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-cont\",\n      children: exportTypes.map(function (ext) {\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: function onClick() {\n            return saveFile(ext);\n          },\n          children: [\"export [.\", ext, \"]\"]\n        }, ext, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"WGXNF2QISgG9cDxVBtOqeJgE8ag=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/runner/smarthr/pages/xlsx2.tsx"],"names":["React","useState","DataGrid","TextEditor","read","utils","writeFile","getRowsCols","data","sheetName","rows","sheet_to_json","header","columns","row","keys","Object","length","map","key","name","encode_col","editor","App","setRows","setColumns","workBook","setWorkBook","sheets","setSheets","current","setCurrent","exportTypes","selectSheet","reset","json_to_sheet","col","skipHeader","new_rows","new_columns","handleFile","ev","target","files","arrayBuffer","file","Sheets","SheetNames","saveFile","ext","wb","book_new","forEach","n","book_append_sheet","sheet","e"],"mappings":"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","sourcesContent":["import React, { useState, ChangeEvent } from \"react\";\nimport DataGrid, { TextEditor } from \"react-data-grid\";\nimport { read, utils, WorkSheet, writeFile } from \"xlsx\";\n\n\ntype Row = any[]; /*{\n  [index: string]: string | number;\n};*/\n\ntype Column = {\n  key: string;\n  name: string;\n  editor: typeof TextEditor;\n};\n\ntype DataSet = {\n  [index: string]: WorkSheet;\n};\n\nfunction getRowsCols(\n  data: DataSet,\n  sheetName: string\n): {\n  rows: Row[];\n  columns: Column[];\n} {\n  const rows: Row[] = utils.sheet_to_json(data[sheetName], {header:1});\n  let columns: Column[] = [];\n\n  for (let row of rows) {\n    const keys: string[] = Object.keys(row);\n\n    if (keys.length > columns.length) {\n      columns = keys.map((key) => {\n        return { key, name: utils.encode_col(+key), editor: TextEditor };\n      });\n    }\n  }\n\n  return { rows, columns };\n}\n\nexport default function App() {\n  const [rows, setRows] = useState<Row[]>([]);\n  const [columns, setColumns] = useState<Column[]>([]);\n  const [workBook, setWorkBook] = useState<DataSet>({} as DataSet);\n  const [sheets, setSheets] = useState<string[]>([]);\n  const [current, setCurrent] = useState<string>(\"\");\n\n  const exportTypes = [\"xlsx\", \"xlsb\", \"csv\", \"html\"];\n\n  function selectSheet(name: string, reset = true) {\n    if(reset) workBook[current] = utils.json_to_sheet(rows, {\n      header: columns.map((col: Column) => col.key),\n      skipHeader: true\n    });\n\n    const { rows: new_rows, columns: new_columns } = getRowsCols(workBook, name);\n\n    setRows(new_rows);\n    setColumns(new_columns);\n    setCurrent(name);\n  }\n\n  async function handleFile(ev: ChangeEvent<HTMLInputElement>): Promise<void> {\n    const file = await ev.target.files?.[0]?.arrayBuffer();\n    const data = read(file);\n\n    setWorkBook(data.Sheets);\n    setSheets(data.SheetNames);\n  }\n\n  function saveFile(ext: string): void {\n    const wb = utils.book_new();\n\n    sheets.forEach((n) => {\n      utils.book_append_sheet(wb, workBook[n], n);\n    });\n\n    writeFile(wb, \"sheet.\" + ext);\n  }\n\n  return (\n    <>\n      <input type=\"file\" onChange={handleFile} />\n      <div className=\"flex-cont\">\n        {sheets.map((sheet) => (\n          <button key={sheet} onClick={(e) => selectSheet(sheet)}>\n            {sheet}\n          </button>\n        ))}\n      </div>\n      <div className=\"flex-cont\">\n        <b>Current Sheet: {current}</b>\n      </div>\n      <DataGrid columns={columns} rows={rows} onRowsChange={setRows} />\n      <div className=\"flex-cont\">\n        {exportTypes.map((ext) => (\n          <button key={ext} onClick={() => saveFile(ext)}>\n            export [.{ext}]\n          </button>\n        ))}\n      </div>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}